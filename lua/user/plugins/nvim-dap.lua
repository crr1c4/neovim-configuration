-- return {
--   "mfussenegger/nvim-dap",
--   dependencies = {
--     "rcarriga/nvim-dap-ui"
--   },
--   config = function()
--     local dap = require("dap")
--     local dapui = require("dapui")
--
--     dapui.setup({})
--
--     dap.listeners.before.attach.dapui_config = function() dapui.open() end
--     dap.listeners.before.launch.dapui_config = function() dapui.open() end
--     dap.listeners.before.event_terminated.dapui_config = function() dapui.close() end
--     dap.listeners.before.event_exited.dapui_config = function() dapui.close() end
--
--     dap.adapters.lldb = {
--       type = 'executable',
--       command = '/usr/bin/lldb-vscode', -- adjust as needed, must be absolute path
--       name = 'lldb'
--     }
--
--     dap.configurations.cpp = {{
--       name = 'Launch',
--       type = 'lldb',
--       request = 'launch',
--       program = function() return vim.fn.input('Path to executable: ', vim.fn.getcwd() .. '/', 'file') end,
--       cwd = '${workspaceFolder}',
--       stopOnEntry = false,
--       args = {},
--     }}
--
--     dap.configurations.rust = {{
--       name = 'Launch',
--       type = 'lldb',
--       request = 'launch',
--       program = function() return vim.fn.input('Path to executable: ', vim.fn.getcwd() .. '/', 'file') end,
--       cwd = '${workspaceFolder}',
--       stopOnEntry = false,
--       args = {},
--     }}
--
--     vim.keymap.set('n', '<leader>db', dap.toggle_breakpoint, {});
--     vim.keymap.set('n', '<leader>dc', dap.continue, {});
--     vim.keymap.set('n', '<leader>dt', dap.terminate, {});
--     vim.keymap.set('n', '<leader>do', dap.step_over, {});
--   end
-- }
--
-- -- https://www.youtube.com/watch?v=oYzZxi3SSnM
-- --
-- --
-- --dap.adapters.haskell = {
-- --  type = 'executable';
-- --  command = 'haskell-debug-adapter';
-- --  args = {'--hackage-version=0.0.33.0'};
-- -- }
-- -- dap.configurations.haskell = {
-- --   {
-- --     type = 'haskell',
-- --     request = 'launch',
-- --     name = 'Debug',
-- --     workspace = '${workspaceFolder}',
-- --     startup = "${file}",
-- --     stopOnEntry = true,
-- --     logFile = vim.fn.stdpath('data') .. '/haskell-dap.log',
-- --     logLevel = 'WARNING',
-- --     ghciEnv = vim.empty_dict(),
-- --     ghciPrompt = "λ: ",
-- --     -- Adjust the prompt to the prompt you see when you invoke the stack ghci command below 
-- --     ghciInitialPrompt = "λ: ",
-- --     ghciCmd= "stack ghci --test --no-load --no-build --main-is TARGET --ghci-options -fprint-evld-with-show",
-- --   },
-- -- }
